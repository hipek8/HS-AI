@startuml
Game *-- "2" Player
Game *-- EventProxy
EventProxy *-- Subscription

Player *-- Battlefield
Player *-- Deck
Player *-- Hand
Player *-- Hero
Player *-- ManaPool
Hero *-- HeroPower
Hero *-- Weapon
Character <|-- Hero
Character <|-- Minion

Card <|-- Minion
Card <|-- Spell
Card <|-- Weapon
Spell <|-- Secret

Minion *-- MinionAbilities
MinionAbilities *-- SpecialMinionAbilities
Weapon *-- WeaponAbilities
WeaponAbilities *-- SpecialWeaponAbilities

class Game {
    turn
    active_player
    event_proxy

    draw_state()
    start_game()
    set_winner()
    end_game()    
}

class Player {
    battlefield
    deck
    hand
    hero
    mana_pool

    mulligan()
    pass_turn()
    [Action] get_all_actions()
}

class Action {
    requierements
    consequences

    bool is_possible()
}

class Character {
    attack_character(target)
}

class Hero {
    life
    power
    armor
    weapon
    hero_power
    secrets

    use_hero_power()
}

class ManaPool {
    current_mana
    base_mana

    refresh()
    bool ramp_up(int)
    add_temporary(int)
    add_overload(int)
    use_mana(int)
    destroy_crystal()
    
}

class Battlefield {
    minions

    put(minion, left_of=None)
}

class Deck {
    cards

    draw(int)
    reveal_card()
}

class Hand {
    cards

    add_card()
    discard()
}

class Card {
    type
    mana_cost
    overload

    discover()
}

class Weapon {
    base_power
    current_power
    base_durability
    current_durability
    abilities

    destroy()
}

class Minion {
    base_power
    current_power
    base_health
    maximum_health
    current_health
    subtype
    abilities
    if_played_this_turn

    destroy()
}

class Spell {
    cast()
    resolve()
}

class Secret {
    activate()
}

class MinionAbilities {
    stealth
    charge
    deathrattle
    taunt
    divine_shield
    windfury
    inspire
    battlecry
    special_minion_abilities
}

class SpecialMinionAbilities {
    at_the_end_of_your_turn
    at_the_start_of_your_turn
    whenever_you_play_a_minion
    whenever_you_cast_a_spell
    whenever_opponent_plays_a_minion
    whenever_opponent_casts_a_spell
    whenever_you_equip_a_weapon
    whenever_you_target_this_minion_with_a_spell
    whenever_you_target_another_friendly_minion_with_a_spell
}

class WeaponAbilities {
    windfury
    battlecry
    deathreattle
    special_weapon_abilities
}

class SpecialWeaponAbilities {
    whenever_you_play_a_minion
    whenever_your_secret_is_activated
}

class Subscription {
    source
    event_type
    parameter_filter
    priority
}

class EventProxy {
    history
    [list or dict] subscriptions

    subscribe(source, event_type, dict parameter_filter, priority = 10)
    send(event)
    _broadcast(event)
}

class TargetHelpers {
    valid_attack_targets(attacking_character)
    valid_spell_targets(spell)
    battlefield_postions(minion)
    friend_or_foe(card, character)
}

class ZoneHelpers {
    on_the_battlefield(card)
    in_the_hand(card)
    in_the_deck(card)
    owner(card)
}

class CombatHelpers {
    fight(attacker, defender)
}

Event <|-- Attack
Attack <|-- AttackOnMinion
Attack <|-- AttackOnPlayer
Event <|-- CardDrawn
Event <|-- DamageDealt
Event <|-- EndOfTurn
Event <|-- BeginningOfTurn
Event <|-- MinionDies
Event <|-- HeroPowerUsed
Event <|-- CharacterHealed
Event <|-- MinionSummoned
MinionSummoned <|-- MinionPlayed
Event <|-- CardPlayed
Event <|-- Overload
Event <|-- WeaponEquipped
Event <|-- SpellCast
SpellCast <|-- SecretPlayed
Event <|-- SecretActivated

class Attack {
    attacking_character
    attacked_character
}

@enduml
